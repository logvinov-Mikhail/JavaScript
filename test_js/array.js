// МАССИВЫ 

let mass = [1, 2, 3, 4, 5];
let massString = ['Вася', 'Петя', 'Катя'];
//Массив – это особый подвид объектов. Квадратные скобки, используемые для того, 
// чтобы получить доступ к свойству arr[0] – это по сути обычный синтаксис доступа по ключу, 
// как obj[key], где в роли obj у нас arr, а в качестве ключа – числовой индекс.

//Методы pop/push, shift/unshift - добавление удаление элементов 
    // arr.push(...items) – добавляет элементы в конец,
    // arr.pop() – извлекает элемент из конца,
    // arr.shift() – извлекает элемент из начала,
    // arr.unshift(...items) – добавляет элементы в начало.
// length- длина массива 

// Метод arr.splice(str) – это универсальный «швейцарский нож» 
// для работы с массивами. Умеет всё: добавлять, удалять и заменять элементы.
    // let arr = ["Я", "изучаю", "JavaScript"];
    // arr.splice(1, 1); // начиная с позиции 1, удалить 1 элемент
    // let arr = ["Я", "изучаю", "JavaScript", "прямо", "сейчас"];
    // // удалить 3 первых элемента и заменить их другими
    // arr.splice(0, 3, "Давай", "танцевать");
    // let arr = ["Я", "изучаю", "JavaScript", "прямо", "сейчас"];
    // // удалить 2 первых элемента
    // let removed = arr.splice(0, 2);
    // let arr = ["Я", "изучаю", "JavaScript"];
    // // с позиции 2
    // // удалить 0 элементов
    // // вставить "сложный", "язык"
    // arr.splice(2, 0, "сложный", "язык");

//Метод arr.slice - Он возвращает новый массив, в который копирует элементы, 
//начиная с индекса start и до end (не включая end).
    // let arr = ["t", "e", "s", "t"];
    // alert( arr.slice(1, 3) ); // e,s (копирует с 1 до 3)
    // alert( arr.slice(-2) ); // s,t (копирует с -2 до конца)

// Метод arr.concat создаёт новый массив, в который копирует данные 
// из других массивов и дополнительные значения.
    // let arr = [1, 2];
    // // создать массив из: arr и [3,4]
    // alert( arr.concat([3, 4]) ); // 1,2,3,4

//ПЕРЕБОР ЭЛЕМЕНТОВ

    // let arr = ["Яблоко", "Апельсин", "Груша"];
    // for (let i = 0; i < arr.length; i++) {
    //   alert( arr[i] );
    // }

    // метод for..of
    // let fruits = ["Яблоко", "Апельсин", "Слива"];
    // // проходит по значениям
    // for (let fruit of fruits) {
    // alert( fruit );
    // }

// Метод arr.forEach позволяет запускать функцию для каждого элемента массива.

    // arr.forEach(function(item, index, array) {
    //     // ... делать что-то с item
    // });
    // // Вызов alert для каждого элемента
    // ["Bilbo", "Gandalf", "Nazgul"].forEach(alert);

    // ["Bilbo", "Gandalf", "Nazgul"].forEach((item, index, array) => {
    //     alert(`${item} имеет позицию ${index} в ${array}`);
    // });

// ПОИСК В МАССИВЕ - Далее рассмотрим методы, которые помогут найти что-нибудь в массиве.
// indexOf/lastIndexOf и includes
// Методы arr.indexOf, arr.lastIndexOf и arr.includes имеют одинаковый синтаксис и делают по сути то же самое, 
// что и их строковые аналоги, но работают с элементами вместо символов:
    // arr.indexOf(item, from) ищет item, начиная с индекса from, и возвращает индекс, на котором был найден искомый 
    // элемент, в противном случае -1.
    // arr.lastIndexOf(item, from) – то же самое, но ищет справа налево.
    // arr.includes(item, from) – ищет item, начиная с индекса from, и возвращает true, если поиск успешен.
        // let arr = [1, 0, false];
        // alert( arr.indexOf(0) ); // 1
        // alert( arr.indexOf(false) ); // 2
        // alert( arr.indexOf(null) ); // -1
        // alert( arr.includes(1) ); // true

// find и findIndex - Представьте, что у нас есть массив объектов. Как нам найти объект с определённым условием?

    // let result = arr.find(function(item, index, array) {
    //     // если true - возвращается текущий элемент и перебор прерывается
    //     // если все итерации оказались ложными, возвращается undefined
    //   });
// Функция вызывается по очереди для каждого элемента массива:
    // item – очередной элемент.
    // index – его индекс.
    // array – сам массив.
        // let users = [
        //   {id: 1, name: "Вася"},
        //   {id: 2, name: "Петя"},
        //   {id: 3, name: "Маша"}
        // ];
        // let user = users.find(item => item.id == 1);
        // alert(user.name); // Вася

// Метод arr.findIndex – по сути, то же самое, но возвращает индекс, 
// на котором был найден элемент, а не сам элемент, и -1, если ничего не найдено.

// filter
// Метод find ищет один (первый попавшийся) элемент, на котором функция-колбэк вернёт true.
// На тот случай, если найденных элементов может быть много, предусмотрен метод arr.filter(fn).
// Синтаксис этого метода схож с find, но filter возвращает массив из всех подходящих элементов:

    // let results = arr.filter(function(item, index, array) {
    //     // если true - элемент добавляется к результату, и перебор продолжается
    //     // возвращается пустой массив в случае, если ничего не найдено
    // });
    // let users = [
    //     {id: 1, name: "Вася"},
    //     {id: 2, name: "Петя"},
    //     {id: 3, name: "Маша"}
    //   ];
    //   // возвращает массив, состоящий из двух первых пользователей
    //   let someUsers = users.filter(item => item.id < 3);
    //   alert(someUsers.length); // 2

//ПРЕОБРАЗОВАНИЕ МАССИВА

// Метод arr.map является одним из наиболее полезных и часто используемых.
// Он вызывает функцию для каждого элемента массива и возвращает массив результатов выполнения этой функции.
    // let result = arr.map(function(item, index, array) {
    // // возвращается новое значение вместо элемента
    // });
    // Например, здесь мы преобразуем каждый элемент в его длину:
    // let lengths = ["Bilbo", "Gandalf", "Nazgul"].map(item => item.length);
    // alert(lengths); // 5,7,6

    //split и join
// Метод str.split(delim)- Он разбивает строку на массив по заданному разделителю delim.
    // let names = 'Вася, Петя, Маша';
    // let arr = names.split(', ');
    // for (let name of arr) {
    // alert( `Сообщение получат: ${name}.` ); // Сообщение получат: Вася (и другие имена)
    // }
//У метода split есть необязательный второй числовой аргумент – ограничение на количество элементов в массиве.
//Вызов split(s) с пустым аргументом s разбил бы строку на массив букв:

//Вызов arr.join(glue) делает в точности противоположное split. 
//Он создаёт строку из элементов arr, вставляя glue между ними.

// reduce/reduceRight 
// Методы arr.reduce и arr.reduceRight Они используются для вычисления какого-нибудь единого значения 
//на основе всего массива.
    // Синтаксис
    // let value = arr.reduce(function(previousValue, item, index, array) {
    //     // ...
    //   }, [initial]);
//Функция применяется по очереди ко всем элементам массива и «переносит» свой результат на следующий вызов.  
    // Аргументы:
    // previousValue – результат предыдущего вызова этой функции, равен initial при первом вызове (если передан initial),
    // item – очередной элемент массива,
    // index – его индекс,
    // array – сам массив.  
    // let arr = [1, 2, 3, 4, 5];
    // let result = arr.reduce((sum, current) => sum + current, 0);
    // alert(result); // 15
//Здесь мы использовали наиболее распространённый вариант reduce, который использует только 2 аргумента.

// Давайте детальнее разберём, как он работает.
// При первом запуске sum равен initial (последний аргумент reduce), то есть 0, а current – первый элемент массива, равный 1. Таким образом, результат функции равен 1.
// При втором запуске sum = 1, и к нему мы добавляем второй элемент массива (2).
// При третьем запуске sum = 3, к которому мы добавляем следующий элемент, и так далее…
    
//Мы также можем опустить начальное значение:
    let arr = [1, 2, 3, 4, 5];
    // убрано начальное значение (нет 0 в конце)
    let result = arr.reduce((sum, current) => sum + current);
    alert( result ); // 15


    // https://learn.javascript.ru/array-methods#preobrazovanie-massiva

// ПОЧИТАТЬ ПРО MAP !!!!
// ОКРУГЛЕНИЕ 
//console.log((0.4 + 0.2).toFixed(1))

// Math
// console.log(Math.E)
// console.log(Math.PI)
//
// console.log(Math.sqrt(25))
// console.log(Math.pow(5, 3))
// console.log(Math.abs(-42))
// console.log(Math.max(42, 12, 23, 11, 422))
// console.log(Math.min(42, 12, 23, 11, 422))
// console.log(Math.floor(4.9))
// console.log(Math.ceil(4.9))
// console.log(Math.round(4.4))
// console.log(Math.trunc(4.9))
// console.log(Math.random())

//  Example
// function getRandomBetween(min, max) {
//     return Math.floor(Math.random() * (max - min + 1) + min)
//   }
  
//   console.log(getRandomBetween(10, 42))